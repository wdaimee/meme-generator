{"version":3,"sources":["components/header.jsx","components/form.jsx","components/content.jsx","components/result.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Form","props","name","placeholder","type","value","textTop","onChange","handleInputChange","textBottom","onClick","handleImageChange","htmlFor","id","accept","handleImageInputChange","hidden","handleMemeGeneration","isMemeGenerated","handleMemeReset","Content","ref","contentContainerRef","src","activeImage","alt","Result","resultContainerRef","App","state","images","React","createRef","fetchImages","a","fetch","then","res","json","catch","err","console","error","imgData","data","memes","setState","url","evt","target","randomNum","Math","floor","random","length","image","log","window","URL","createObjectURL","files","current","childNodes","removeChild","domtoimage","toPng","dataUrl","img","Image","appendChild","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gVAUeA,G,YARA,WACX,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,eAAf,wBC4DGC,EA/DF,SAACC,GACV,OACI,yBAAKF,UAAU,QACP,yBAAKA,UAAU,gBAEX,2BACIG,KAAK,WACLC,YAAY,WACZC,KAAK,OACLC,MAAOJ,EAAMK,QACbC,SAAUN,EAAMO,oBAGpB,2BACIN,KAAK,cACLC,YAAY,cACZC,KAAK,OACLC,MAAOJ,EAAMQ,WACbF,SAAUN,EAAMO,qBAGxB,yBAAKT,UAAU,cAEX,4BACIA,UAAU,kBACVK,KAAK,SACLM,QAAST,EAAMU,mBAHnB,gBASA,2BACIZ,UAAU,kBACVa,QAAQ,aAFZ,aAKI,2BAAOC,GAAG,YAAYX,KAAK,YAAYE,KAAK,OACxCU,OAAO,oBAAoBP,SAAUN,EAAMc,uBAAwBC,QAAM,KAIjF,4BACIjB,UAAU,kBACVK,KAAK,SACLM,QAAST,EAAMgB,sBAHnB,iBASChB,EAAMiB,iBAAmB,4BACtBnB,UAAU,iBACVK,KAAK,SACLM,QAAST,EAAMkB,iBAHO,YCpC/BC,EAfC,SAACnB,GACb,OACI,yBAAKF,UAAU,UAAUsB,IAAKpB,EAAMqB,qBAEpC,yBAAKC,IAAKtB,EAAMuB,YAAaC,IAAI,SAGjC,4BAAKxB,EAAMK,SAGX,4BAAKL,EAAMQ,cCJJiB,EANA,SAACzB,GACZ,OACI,yBAAKoB,IAAKpB,EAAM0B,mBAAoB5B,UAAU,YCqIvC6B,E,4MA3HbC,MAAQ,CACNC,OAAQ,GACRN,YAAa,GACblB,QAAS,GACTG,WAAY,GACZS,iBAAiB,G,EAInBI,oBAAsBS,IAAMC,Y,EAC5BL,mBAAqBI,IAAMC,Y,EAI3BC,Y,sBAAc,8BAAAC,EAAA,sEAEUC,MAAM,qCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAJtC,cAENG,EAFM,gBAKQA,EAAQC,KAAKC,MALrB,cAKNA,EALM,gBAON,EAAKC,SAAS,CAAEhB,OAAQe,IAPlB,wBAUN,EAAKC,SAAS,CAAEtB,YAAaqB,EAAM,GAAGE,MAVhC,4C,EAcdvC,kBAAoB,SAACwC,GACK,aAApBA,EAAIC,OAAO/C,KAEb,EAAK4C,SAAS,CAAExC,QAAS0C,EAAIC,OAAO5C,QAGpC,EAAKyC,SAAS,CAAErC,WAAYuC,EAAIC,OAAO5C,S,EAK3CM,kBAAoB,WAElB,IAAMuC,EAAYC,KAAKC,MAAMD,KAAKE,SAAW,EAAKxB,MAAMC,OAAOwB,QACzDC,EAAQ,EAAK1B,MAAMC,OAAOoB,GAChCT,QAAQe,IAAID,GAEZ,EAAKT,SAAS,CAAEtB,YAAa+B,EAAMR,O,EAIrChC,uBAAyB,SAACiC,GAExB,EAAKF,SAAS,CAAEtB,YAAaiC,OAAOC,IAAIC,gBAAgBX,EAAIC,OAAOW,MAAM,O,EAI3E3C,qBAAuB,WAEjB,EAAKU,mBAAmBkC,QAAQC,WAAWR,OAAS,GACtD,EAAK3B,mBAAmBkC,QAAQE,YAAY,EAAKpC,mBAAmBkC,QAAQC,WAAW,IAIzFE,IAAWC,MAAM,EAAK3C,oBAAoBuC,SAASzB,MAAK,SAAC8B,GAEvD,IAAMC,EAAM,IAAIC,MAGhBD,EAAI5C,IAAM2C,EAGV,EAAKvC,mBAAmBkC,QAAQQ,YAAYF,GAG5C,EAAKrB,SAAS,CAAE5B,iBAAiB,Q,EAKrCC,gBAAkB,WAEhB,EAAKQ,mBAAmBkC,QAAQE,YAAY,EAAKpC,mBAAmBkC,QAAQC,WAAW,IAGvF,EAAKhB,SAAS,CAAE5B,iBAAiB,K,4LAK3BoD,KAAKrC,c,qIAIX,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEO,QAASgE,KAAKzC,MAAMvB,QACpBG,WAAY6D,KAAKzC,MAAMpB,WACvBM,uBAAwBuD,KAAKvD,uBAC7BP,kBAAmB8D,KAAK9D,kBACxBG,kBAAmB2D,KAAK3D,kBACxBM,qBAAsBqD,KAAKrD,qBAC3BE,gBAAiBmD,KAAKnD,gBACtBD,gBAAiBoD,KAAKzC,MAAMX,kBAI5B,kBAAC,EAAD,CACEM,YAAa8C,KAAKzC,MAAML,YACxBF,oBAAqBgD,KAAKhD,oBAC1Bb,WAAY6D,KAAKzC,MAAMpB,WACvBH,QAASgE,KAAKzC,MAAMvB,UAItB,kBAAC,EAAD,CAAQqB,mBAAoB2C,KAAK3C,0B,GArHzB4C,aCDEC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM4C,c","file":"static/js/main.b48b0d46.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return(\n        <div className=\"header\">\n            <div className=\"header-name\">MEME GENERATOR!!!</div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Form = (props) => {\n    return(\n        <div className=\"form\">\n                <div className=\"form__inputs\">\n                {/* Input for the text at the top */}\n                    <input\n                        name=\"text-top\"\n                        placeholder=\"Top Text\"\n                        type=\"text\"\n                        value={props.textTop}\n                        onChange={props.handleInputChange}\n                        />\n\n                    <input\n                        name=\"text-bottom\"\n                        placeholder=\"Bottom Text\"\n                        type=\"text\"\n                        value={props.textBottom}\n                        onChange={props.handleInputChange}\n                        />\n                </div>\n                <div className=\"form__btns\">\n                    {/* Button to load random image from api.imgflip.com*/}\n                    <button\n                        className=\"btn btn-primary\"\n                        type=\"button\"\n                        onClick={props.handleImageChange}\n                    >\n                        Change Image\n                    </button>\n\n                    {/* Button to load image from disk */}\n                    <label\n                        className=\"btn btn-primary\"\n                        htmlFor=\"fileInput\"\n                    >\n                        Load image\n                        <input id=\"fileInput\" name=\"fileInput\" type=\"file\"\n                            accept=\".jpg, .jpeg, .png\" onChange={props.handleImageInputChange} hidden />\n                    </label>\n\n                    {/* Button to generate png image of the meme */}\n                    <button\n                        className=\"btn btn-primary\"\n                        type=\"button\"\n                        onClick={props.handleMemeGeneration}\n                    >\n                        Generate Meme\n                    </button>\n\n                    {/* Button to remove the meme image from the DOM */}\n                    {props.isMemeGenerated && <button \n                        className=\"btn btn-danger\"\n                        type=\"button\"\n                        onClick={props.handleMemeReset} \n                        >\n                        Reset\n                        </button>}\n                </div>\n            </div>\n    )\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Content = (props) => {\n    return(\n        <div className=\"content\" ref={props.contentContainerRef}>\n        {/* Image Preview */}\n        <img src={props.activeImage} alt=\"meme\" />\n\n        {/* Text at the Top */}\n        <h1>{props.textTop}</h1>\n\n        {/* Text at the Bottom */}\n        <h2>{props.textBottom}</h2>\n      </div>\n    )\n}\n\nexport default Content;","import React from 'react';\n\nconst Result = (props) => {\n    return(\n        <div ref={props.resultContainerRef} className=\"result\"></div>\n    )\n}\n\nexport default Result;","import React, { Component } from 'react';\nimport domtoimage from 'dom-to-image-more'\n\n//Import CSS\nimport './App.css';\nimport './styles/styles.css';\n\n//Import components\nimport Header from './components/header';\nimport Form from './components/form';\nimport Content from './components/content';\nimport Result from './components/result';\n\nclass App extends Component {\n  state = {\n    images: [],\n    activeImage: '',\n    textTop: '',\n    textBottom: '',\n    isMemeGenerated: false\n  }\n\n  //create refs\n  contentContainerRef = React.createRef();\n  resultContainerRef = React.createRef();\n\n\n  //Fetch images from https://api.imgflip.com/get_memes\n  fetchImages = async () => {\n    //Get the memes\n    const imgData = await fetch('https://api.imgflip.com/get_memes')\n                          .then(res => res.json())\n                          .catch(err => console.error(err));\n    const memes = await imgData.data.memes;\n    //update images state\n    await this.setState({ images: memes });\n\n    //update activeImage state\n    await this.setState({ activeImage: memes[0].url });\n\n  }\n\n  handleInputChange = (evt) => {\n    if (evt.target.name === 'text-top') {\n      //update textTop state\n      this.setState({ textTop: evt.target.value });\n    } else {\n      //update textBottom state\n      this.setState({ textBottom: evt.target.value });\n    }\n  }\n\n  //choose random images from imaged fetched from api.imgflip.com\n  handleImageChange = () => {\n    //choose random image\n    const randomNum = Math.floor(Math.random() * this.state.images.length)\n    const image = this.state.images[randomNum]\n    console.log(image)\n    //update active image state\n    this.setState({ activeImage: image.url })\n  }\n\n  //Handle image upload via file input\n  handleImageInputChange = (evt) => {\n    //Update activeImage state\n    this.setState({ activeImage: window.URL.createObjectURL(evt.target.files[0])});\n  }\n\n  //Handle Meme Generation\n  handleMemeGeneration = () => {\n    //Remove any existing images\n    if (this.resultContainerRef.current.childNodes.length > 0) {\n      this.resultContainerRef.current.removeChild(this.resultContainerRef.current.childNodes[0])\n    }\n\n    //generate meme image from the content of 'content' div\n    domtoimage.toPng(this.contentContainerRef.current).then((dataUrl) => {\n      //Create new image\n      const img = new Image();\n\n      //Use url of the generated image as src\n      img.src = dataUrl;\n\n      //Append new image to DOM\n      this.resultContainerRef.current.appendChild(img);\n\n      //Update state for isMemeGenerated\n      this.setState({ isMemeGenerated: true });\n    });\n  }\n\n  //Handle resetting the meme generator/removing existing pictures\n  handleMemeReset = () => {\n    //Remove existing child node inside result container (generated meme image)\n    this.resultContainerRef.current.removeChild(this.resultContainerRef.current.childNodes[0]);\n\n    //Update state for isMemeGenerated\n    this.setState({ isMemeGenerated: false });\n  }\n\n  //Fetch images when App component mounts\n  async componentDidMount() {\n    await this.fetchImages();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        {/* Add Form Component */}\n        <Form\n          textTop={this.state.textTop}\n          textBottom={this.state.textBottom}\n          handleImageInputChange={this.handleImageInputChange}\n          handleInputChange={this.handleInputChange}\n          handleImageChange={this.handleImageChange}\n          handleMemeGeneration={this.handleMemeGeneration}\n          handleMemeReset={this.handleMemeReset}\n          isMemeGenerated={this.state.isMemeGenerated}\n        />\n\n          {/* Add Content Component */}\n          <Content \n            activeImage={this.state.activeImage}\n            contentContainerRef={this.contentContainerRef}\n            textBottom={this.state.textBottom}\n            textTop={this.state.textTop}\n          />\n\n          {/* Add Result Component */}\n          <Result resultContainerRef={this.resultContainerRef} />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}